// SPDX-License-Identifier: MIT
pragma solidity ^0.8.30;

interface IStakingContract {
    function getStakeInfoForToken(uint256 _tokenId, address _staker) external view returns (
        uint256 _tokensStaked,
        uint256 _rewards
    );
}

contract EarlyClaimNFT {
    // --- Claim period ---
    uint256 public constant CLAIM_START = 1747795200;   // May 20, 2025 UTC
    uint256 public constant CLAIM_DEADLINE = 1791640770; // 04 Oct 2026 UTC
    
    // --- Token info ---
    string private _baseTokenURI = "https://bafybeibn7beo2h7sjuzfcyb36uyve72x35ikii4qsk2ccdw2d24cf6iabe.ipfs.w3s.link/";
    string private constant _name = "EarlyNFT";
    string private constant _symbol = "EARLY";
    uint256 private _nextTokenId = 1;
    
    // --- Claim tracking ---
    mapping(address => bool) public hasClaimed;
    mapping(address => uint256) public claimTimestamp;
    
    // --- External contracts ---
    IStakingContract public constant stakingContract = IStakingContract(0xBBc4f75874930EB4d8075FCB3f48af2535A8E848);
    
    // --- ERC721 Storage ---
    mapping(uint256 => address) private _owners;
    mapping(address => uint256) private _balances;
    mapping(uint256 => address) private _tokenApprovals;
    mapping(address => mapping(address => bool)) private _operatorApprovals;
    
    // --- Events ---
    event Claimed(address indexed claimer, uint256 indexed tokenId, uint256 timestamp);
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    // --- Claim function (ORIGINAL LOGIC) ---
    function claim(uint256[] calldata tokenIds) external {
        require(block.timestamp >= CLAIM_START, "Claim not started");
        require(block.timestamp <= CLAIM_DEADLINE, "Claim period ended");
        require(!hasClaimed[msg.sender], "Already claimed");

        uint256 totalRewards;
        uint256 len = tokenIds.length;

        unchecked {
            for (uint256 i = 0; i < len; i++) {
                (, uint256 rewards) = stakingContract.getStakeInfoForToken(tokenIds[i], msg.sender);
                totalRewards += rewards;
            }
        }

        require(totalRewards >= 1 ether, "Not enough HASH mined");

        hasClaimed[msg.sender] = true;
        claimTimestamp[msg.sender] = block.timestamp;

        uint256 newId = _nextTokenId++;
        _mint(msg.sender, newId);

        emit Claimed(msg.sender, newId, block.timestamp);
    }

    // --- ERC721 Functions ---
    function balanceOf(address owner_) public view returns (uint256) {
        require(owner_ != address(0), "Zero address");
        return _balances[owner_];
    }

    function ownerOf(uint256 tokenId) public view returns (address) {
        address owner_ = _owners[tokenId];
        require(owner_ != address(0), "Invalid token");
        return owner_;
    }

    function approve(address to, uint256 tokenId) public {
        address owner_ = ownerOf(tokenId);
        require(to != owner_, "Self approval");
        require(msg.sender == owner_ || isApprovedForAll(owner_, msg.sender), "Not authorized");

        _tokenApprovals[tokenId] = to;
        emit Approval(owner_, to, tokenId);
    }

    function getApproved(uint256 tokenId) public view returns (address) {
        _requireMinted(tokenId);
        return _tokenApprovals[tokenId];
    }

    function setApprovalForAll(address operator, bool approved) public {
        require(msg.sender != operator, "Self approval");
        _operatorApprovals[msg.sender][operator] = approved;
        emit ApprovalForAll(msg.sender, operator, approved);
    }

    function isApprovedForAll(address owner_, address operator) public view returns (bool) {
        return _operatorApprovals[owner_][operator];
    }

    function transferFrom(address from, address to, uint256 tokenId) public {
        require(_isApprovedOrOwner(msg.sender, tokenId), "Not authorized");
        _transfer(from, to, tokenId);
    }

    function safeTransferFrom(address from, address to, uint256 tokenId) public {
        safeTransferFrom(from, to, tokenId, "");
    }

    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public {
        require(_isApprovedOrOwner(msg.sender, tokenId), "Not authorized");
        _safeTransfer(from, to, tokenId, data);
    }

    // --- Internal Functions ---
    function _mint(address to, uint256 tokenId) internal {
        require(to != address(0), "Zero address");
        require(_owners[tokenId] == address(0), "Already minted");

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    function _transfer(address from, address to, uint256 tokenId) internal {
        require(ownerOf(tokenId) == from, "Wrong from");
        require(to != address(0), "Zero address");

        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    function _approve(address to, uint256 tokenId) internal {
        _tokenApprovals[tokenId] = to;
        emit Approval(ownerOf(tokenId), to, tokenId);
    }

    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
        address owner_ = ownerOf(tokenId);
        return (spender == owner_ || 
                getApproved(tokenId) == spender || 
                isApprovedForAll(owner_, spender));
    }

    function _requireMinted(uint256 tokenId) internal view {
        require(_owners[tokenId] != address(0), "Invalid token");
    }

    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private returns (bool) {
        if (to.code.length > 0) {
            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch {
                return false;
            }
        }
        return true;
    }

    // --- View Functions ---
    function _baseURI() internal view returns (string memory) {
        return _baseTokenURI;
    }

    function isClaimOpen() external view returns (bool) {
        return block.timestamp >= CLAIM_START && block.timestamp <= CLAIM_DEADLINE;
    }

    function totalSupply() external view returns (uint256) {
        return _nextTokenId - 1;
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function tokenURI(uint256 tokenId) public view returns (string memory) {
        _requireMinted(tokenId);
        return string(abi.encodePacked(_baseTokenURI, _toString(tokenId)));
    }

    function supportsInterface(bytes4 interfaceId) public pure returns (bool) {
        return 
            interfaceId == 0x01ffc9a7 || // ERC165
            interfaceId == 0x80ac58cd || // ERC721
            interfaceId == 0x5b5e139f;   // ERC721Metadata
    }

    // --- Utility ---
    function _toString(uint256 value) internal pure returns (string memory) {
        if (value == 0) return "0";
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }
}

interface IERC721Receiver {
    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
}